/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dominogui;

import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/**
 *
 * @author John, Leos
 */
public class HungarianGUI extends javax.swing.JFrame {
    private Hungarian hungarian;
    private ArrayList<JRadioButton> userHand;
    private ButtonGroup userHandButtonGroup;
    ResourceBundle bundle = ResourceBundle.getBundle("dominogui.MessageBundles");
    private int round = 1;
    private int selected = -1;

    /**
     * Creates new form DominoGame
     */
    public HungarianGUI() {
        hungarian = new Hungarian();
        hungarian.initGame();
        userHand = new ArrayList<>();
        initComponents();
        PlaceLeft.setEnabled(false);
        PlaceRight.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        handGroup = new javax.swing.ButtonGroup();
        Table = new javax.swing.JLabel();
        PlaceLeft = new javax.swing.JButton();
        PlaceRight = new javax.swing.JButton();
        Info = new javax.swing.JLabel();
        Reset = new javax.swing.JButton();
        p1 = new javax.swing.JPanel();
        Score = new javax.swing.JLabel();
        Round = new javax.swing.JLabel();
        Start = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Help = new javax.swing.JMenuItem();
        MainMenuItem = new javax.swing.JMenuItem();

        for (int i= 0; i < 12; i++){
            javax.swing.JRadioButton anotherButton= new javax.swing.JRadioButton();
            userHand.add(anotherButton);
            p1.add(userHand.get(i));
            userHand.get(i).setText(hungarian.player1.getHandTile(i).toString());
            handGroup.add(userHand.get(i));
            userHand.get(i).setActionCommand("RB"+i);
        }
        userHand.get(0).setSelected(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dominogui/MessageBundles"); // NOI18N
        setTitle(bundle.getString("Menu.Hungarian.text")); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Table.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 14)); // NOI18N
        Table.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Table.setAutoscrolls(true);
        Table.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("table"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Microsoft JhengHei UI", 1, 18))); // NOI18N
        Table.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(Table, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 750, 55));

        PlaceLeft.setText(bundle.getString("placeLeftButton")); // NOI18N
        PlaceLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceLeftActionPerformed(evt);
            }
        });
        getContentPane().add(PlaceLeft, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 236, 150, 55));

        PlaceRight.setText(bundle.getString("placeRightButton")); // NOI18N
        handGroup.add(PlaceRight);
        PlaceRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceRightActionPerformed(evt);
            }
        });
        getContentPane().add(PlaceRight, new org.netbeans.lib.awtextra.AbsoluteConstraints(531, 236, 140, 55));

        Info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Info.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(Info, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 680, 30));

        Reset.setText(bundle.getString("resetButton")); // NOI18N
        Reset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        getContentPane().add(Reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 236, 150, 55));
        getContentPane().add(p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 690, -1));
        getContentPane().add(Score, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 650, 80));

        Round.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        Round.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Round.setText(bundle.getString("round")); // NOI18N
        getContentPane().add(Round, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 170, 40));

        Start.setText(bundle.getString("startButton")); // NOI18N
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });
        getContentPane().add(Start, new org.netbeans.lib.awtextra.AbsoluteConstraints(609, 10, 120, 40));

        jMenu1.setMnemonic('G');
        jMenu1.setText(bundle.getString("HungarianGUI.jMenu1.text")); // NOI18N

        Help.setMnemonic('H');
        Help.setText(bundle.getString("help")); // NOI18N
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        jMenu1.add(Help);

        MainMenuItem.setMnemonic('M');
        MainMenuItem.setText(bundle.getString("mainMenu")); // NOI18N
        MainMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(MainMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Checks if game has over, so display the final results.
     * If the score of both players is under 100, displays the results so far and goes to the next round.
     */
    public void checkIfGameOver() {
        if (!hungarian.gameOver()) {
            Round.setText(bundle.getString("round") + ++round);
            Info.setText(bundle.getString("nextRound"));
            Score.setText(bundle.getString("scoreTemp") + hungarian.player1.getScore() + " " + bundle.getString("computer") + hungarian.bot.getScore());
            p1.removeAll();
            initHandGroup();
            Start.setVisible(true);
        } else {
            Score.setText(hungarian.displayResults());
            Info.setText(bundle.getString("gameOver"));
            JOptionPane.showMessageDialog(rootPane, hungarian.displayResults());
        }
        PlaceLeft.setEnabled(false);
        PlaceRight.setEnabled(false);
    }
    /**
     * Initialize the Button group of the radio buttons.
     */
    public void initHandGroup(){
        for (int i = 0; i < 12; i++) {
            JRadioButton temp = new JRadioButton();
            userHand.add(temp);
            p1.add(userHand.get(i));
            userHand.get(i).setText(hungarian.player1.getHandTile(i).toString());
            handGroup.add(userHand.get(i));
            userHand.get(i).setActionCommand("RB" + i);
            userHand.get(i).setEnabled(true);
        }
        userHand.get(0).setSelected(true);
    }
    
    /**
     * Take the selected Radio Button as input and checks if right move can be done, then it checks if bot can play so it's bot's turn...
     * After all it calls checkIfGameOver() method to check if the game is over or go to the next round.
     */
    public void makeLeftMove() {
        selected = -1;
        for (int i = 0; i < 12; i++) {
            if (handGroup.getSelection() == null) {
                Info.setText(bundle.getString("didNotChose"));
            } else {
                if (handGroup.getSelection().getActionCommand().equals(userHand.get(i).getActionCommand())) {
                    selected = i;
                    break;
                }
            }
        }

        if (selected != -1) {
            Tile toPlayed = hungarian.player1.getHandTile(selected);
            if (hungarian.canLeftMove(toPlayed) == true) {
                Info.setText(bundle.getString("leftMoveDone"));
                Table.setText(hungarian.showTableTiles());
                userHand.get(selected).setEnabled(false);
                handGroup.remove(userHand.get(selected));
                userHand.remove(selected);
                hungarian.player1.removeTile(selected);
            } else {
                Info.setText(bundle.getString("cantLeft"));
            }
        }
        if (false == hungarian.checkPlayer()) {
            if (hungarian.player1.numOfHandTiles() != 0 && hungarian.checkBot()) {
                Info.setText(bundle.getString("noMoreMoves"));
                do {
                
                } while (hungarian.botMove());
                Table.setText(hungarian.showTableTiles());
                if (hungarian.checkPlayer() == false || hungarian.bot.numOfHandTiles() == 0) {
                    checkIfGameOver();
                }
            } else {
                checkIfGameOver();
            }
        }
    }
    
    /**
     * Take the selected Radio Button as input and checks if right move can be done, then it checks if bot can play so it's bot's turn...
     * After all it calls checkIfGameOver() method to check if the game is over or go to the next round.
     */
    public void makeRightMove() {
        selected = -1;
        for (int i = 0; i < 12; i++) {
            if (handGroup.getSelection() == null) {
                Info.setText(bundle.getString("didNotChose"));
            } else {
                if (handGroup.getSelection().getActionCommand().equals(userHand.get(i).getActionCommand())) {
                    selected = i;
                    break;
                }
            }
        }
        if (selected != -1) {
            Tile toPlayed = hungarian.player1.getHandTile(selected);
            if (hungarian.canRightMove(toPlayed) == true) {
                Info.setText(bundle.getString("rightMoveDone"));
                Table.setText(hungarian.showTableTiles());
                userHand.get(selected).setEnabled(false);
                handGroup.remove(userHand.get(selected));
                userHand.remove(selected);
                hungarian.player1.removeTile(selected);
            } else {
                Info.setText(bundle.getString("cantRight"));
            }
        }
        if (false == hungarian.checkPlayer()) {
            if (hungarian.player1.numOfHandTiles() != 0 && hungarian.checkBot()) {
                Info.setText(bundle.getString("noMoreMoves"));
                do {
                
                } while (hungarian.botMove());
                Table.setText(hungarian.showTableTiles());
                if (hungarian.checkPlayer() == false || hungarian.bot.numOfHandTiles() == 0) {
                    checkIfGameOver();
                }
                    
            } else {
                checkIfGameOver();
            }
        }
    }

    //Press Left Button:
    private void PlaceLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceLeftActionPerformed
        makeLeftMove();
    }//GEN-LAST:event_PlaceLeftActionPerformed

    //Press Right Button:
    private void PlaceRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceRightActionPerformed
        makeRightMove();
    }//GEN-LAST:event_PlaceRightActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        round = 1;
        Round.setText(bundle.getString("round") + round);
        Table.setText("");
        Info.setText("");
        Score.setText("");
        Start.setVisible(true);
        hungarian.initGame();
        p1.removeAll();
        initHandGroup();
    }//GEN-LAST:event_ResetActionPerformed

    private void MainMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuItemActionPerformed
        this.dispose();
        new Menu().setVisible(true);
    }//GEN-LAST:event_MainMenuItemActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        Table.setText("");
        if (hungarian.player1.getBiggerDouble() < hungarian.bot.getBiggerDouble()) {
            Info.setText(bundle.getString("computerPlays"));
            do {

            } while (hungarian.botMove());
            Table.setText(hungarian.showTableTiles());
            if (hungarian.checkPlayer() && hungarian.bot.numOfHandTiles() != 0) {
                Start.setVisible(false);
            }
        } else {
            Info.setText(bundle.getString("playerPlays"));
            Start.setVisible(false);
        }
        PlaceLeft.setEnabled(true);
        PlaceRight.setEnabled(true);
    }//GEN-LAST:event_StartActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        JOptionPane.showMessageDialog(rootPane, bundle.getString("Hungarian.Rules"));
    }//GEN-LAST:event_HelpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Help;
    private javax.swing.JLabel Info;
    private javax.swing.JMenuItem MainMenuItem;
    private javax.swing.JButton PlaceLeft;
    private javax.swing.JButton PlaceRight;
    private javax.swing.JButton Reset;
    public javax.swing.JLabel Round;
    private javax.swing.JLabel Score;
    private javax.swing.JButton Start;
    private javax.swing.JLabel Table;
    private javax.swing.ButtonGroup handGroup;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel p1;
    // End of variables declaration//GEN-END:variables
}
