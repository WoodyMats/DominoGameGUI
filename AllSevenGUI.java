/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dominogui;

import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/**
 *
 * @author John, Leos
 */
public class AllSevenGUI extends javax.swing.JFrame {

    private AllSeven seven;
    private ArrayList<JRadioButton> userHand;
    private javax.swing.ButtonGroup handGroup;
    private ButtonGroup stackGroup;
    private int round = 1;
    private int selected = -1;
    private boolean hasStackButtonPressed = false;
    private boolean botTookFromStack = false;
    private int index = 7;

    ResourceBundle bundle = ResourceBundle.getBundle("dominogui.MessageBundles");

    /**
     * Creates new form AllSevenGUI
     */
    public AllSevenGUI() {
        seven = new AllSeven();
        seven.initGame();
        userHand = new ArrayList<>();
        stackGroup = new ButtonGroup();
        initComponents();
        initHandGroup();
        PlaceLeft.setEnabled(false);
        PlaceRight.setEnabled(false);
        Stack.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Table = new javax.swing.JLabel();
        Round = new javax.swing.JLabel();
        PlaceLeft = new javax.swing.JButton();
        PlaceRight = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Start = new javax.swing.JButton();
        Info = new javax.swing.JLabel();
        Score = new javax.swing.JLabel();
        Stack = new javax.swing.JButton();
        p1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("dominogui/MessageBundles"); // NOI18N
        setTitle(bundle.getString("AllSevenGUI.title_1")); // NOI18N
        setSize(new java.awt.Dimension(775, 340));

        Table.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 14)); // NOI18N
        Table.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Table.setToolTipText(bundle.getString("AllSevenGUI.Table.toolTipText_1")); // NOI18N
        Table.setAutoscrolls(true);
        Table.setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("table"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Microsoft JhengHei UI", 1, 18))); // NOI18N
        Table.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        Round.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 18)); // NOI18N
        Round.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Round.setText(bundle.getString("round") + round);

        PlaceLeft.setText(bundle.getString("placeLeftButton")); // NOI18N
        PlaceLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceLeftActionPerformed(evt);
            }
        });

        PlaceRight.setText(bundle.getString("placeRightButton")); // NOI18N
        PlaceRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceRightActionPerformed(evt);
            }
        });

        Reset.setText(bundle.getString("resetButton")); // NOI18N
        Reset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Start.setText(bundle.getString("startButton")); // NOI18N
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Info.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        Stack.setText(bundle.getString("getFromStack")); // NOI18N
        Stack.setComponentPopupMenu(Stack.getComponentPopupMenu());
        Stack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StackActionPerformed(evt);
            }
        });

        p1.setLayout(new javax.swing.BoxLayout(p1, javax.swing.BoxLayout.LINE_AXIS));

        jMenu1.setMnemonic('G');
        jMenu1.setText(bundle.getString("HungarianGUI.jMenu1.text")); // NOI18N

        jMenuItem1.setMnemonic('H');
        jMenuItem1.setText(bundle.getString("help")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setMnemonic('M');
        jMenuItem2.setText(bundle.getString("mainMenu")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Score, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(PlaceLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(171, 171, 171)
                                .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Stack, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PlaceRight, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Round, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(224, 224, 224)
                .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(layout.createSequentialGroup()
                .addComponent(Table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(470, Short.MAX_VALUE)
                    .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(470, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Round, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Table, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(Info, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Stack, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Score, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlaceRight, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PlaceLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(220, Short.MAX_VALUE)
                    .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(231, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void PlaceLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceLeftActionPerformed
        makeLeftMove();
    }//GEN-LAST:event_PlaceLeftActionPerformed

    private void PlaceRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceRightActionPerformed
        makeRightMove();
    }//GEN-LAST:event_PlaceRightActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        round = 1;
        Round.setText(bundle.getString("round") + round);
        Table.setText("");
        Info.setText("");
        Score.setText("");
        Start.setEnabled(true);
        seven.initGame();
        p1.removeAll();
        initHandGroup();
    }//GEN-LAST:event_ResetActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        Table.setText("");
        hasStackButtonPressed = false;
        botTookFromStack = false;
        if (seven.player1.getBiggerDouble() < seven.bot.getBiggerDouble()) {
            Info.setText(bundle.getString("computerPlays"));
            do {

            } while (seven.botMove());
            Table.setText(seven.showTableTiles());
            if (seven.checkPlayer() && seven.bot.numOfHandTiles() != 0) {
                Start.setEnabled(false);
            }
        } else {
            Info.setText(bundle.getString("playerPlays"));
            Start.setEnabled(false);
        }
        PlaceLeft.setEnabled(true);
        PlaceRight.setEnabled(true);
        Stack.setEnabled(true);
    }//GEN-LAST:event_StartActionPerformed
    
    /**
     * Player can take tiles from stack either he can play or not. If he can play he take one tile and then the button is Disabled until next round.
     * If he can't play takes tiles from the stack until he can play and then the stack button is Disabled until next round.
     * @param evt button pressed.
     */
    private void StackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StackActionPerformed
        if (seven.getStackSize() > 2) {
            Tile tempTile = seven.getStackTile(0);
            seven.player1.addToHand(tempTile);
            seven.removeTile(tempTile);
            JRadioButton temp = new JRadioButton();
            userHand.add(temp);
            int i = seven.player1.numOfHandTiles() - 1;
            p1.add(userHand.get(i));
            userHand.get(i).setText(tempTile.toString());
            handGroup.add(userHand.get(i));
            userHand.get(i).setActionCommand("RB" + index);
            userHand.get(i).setEnabled(true);
            index++;
            if (seven.getStackSize() <= 2 || seven.checkPlayer()) {
                Info.setText(bundle.getString("noMoreTilesFromStack"));
                Stack.setEnabled(false);
                hasStackButtonPressed = true;
            }
        }else{
            Info.setText(bundle.getString("noMoreTilesFromStack"));
            Stack.setEnabled(false);
        }
    }//GEN-LAST:event_StackActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.dispose();
        new Menu().setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(rootPane, bundle.getString("AllSeven.Rules"));
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Info;
    private javax.swing.JButton PlaceLeft;
    private javax.swing.JButton PlaceRight;
    private javax.swing.JButton Reset;
    public javax.swing.JLabel Round;
    private javax.swing.JLabel Score;
    private javax.swing.JButton Stack;
    private javax.swing.JButton Start;
    private javax.swing.JLabel Table;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel p1;
    // End of variables declaration//GEN-END:variables

    /**
     * Take the selected Radio Button as input and checks if right move can be
     * done, then it checks if bot can play so it's bot's turn... After all it
     * calls checkIfGameOver() method to check if the game is over or go to the
     * next round.
     */
    private void makeRightMove() {
        selected = -1;
        for (int i = 0; i < 20; i++) {
            if (handGroup.getSelection() == null) {
                Info.setText(bundle.getString("didNotChose"));
            } else {
                if (handGroup.getSelection().getActionCommand().equals(userHand.get(i).getActionCommand())) {
                    selected = i;
                    break;
                }
            }
        }
        if (selected != -1) {
            Tile toPlayed = seven.player1.getHandTile(selected);
            if (seven.canRightMove(toPlayed) == true) {
                Info.setText(bundle.getString("rightMoveDone"));
                Table.setText(seven.showTableTiles());
                userHand.get(selected).setEnabled(false);
                handGroup.remove(userHand.get(selected));
                userHand.remove(selected);
                seven.player1.removeTile(selected);
            } else {
                Info.setText(bundle.getString("cantRight"));
            }
        }
        if (false == seven.checkPlayer()) {
            if (seven.avaliableMove(hasStackButtonPressed) == true && seven.player1.numOfHandTiles() != 0) {
                Info.setText(bundle.getString("tip"));
            } else {
                if (seven.player1.numOfHandTiles() != 0 && seven.checkBot()) {
                    Info.setText(bundle.getString("noMoreMoves"));
                    do {
                        while(!seven.botMove() && seven.avaliableMove(botTookFromStack)){
                            Tile tempTile = seven.getStackTile(0);
                            seven.bot.addToHand(tempTile);
                            seven.removeTile(tempTile);
                        }
                    } while (seven.botMove());
                    botTookFromStack = true;
                    Table.setText(seven.showTableTiles());
                    if ((seven.checkPlayer() == false || seven.bot.numOfHandTiles() == 0) && seven.avaliableMove(hasStackButtonPressed) == false) {
                        checkIfGameOver();
                    }
                } else {
                    checkIfGameOver();
                }
            }
        }
    }

    /**
     * Take the selected Radio Button as input and checks if right move can be
     * done, then it checks if bot can play so it's bot's turn... After all it
     * calls checkIfGameOver() method to check if the game is over or go to the
     * next round.
     */
    private void makeLeftMove() {
        selected = -1;
        for (int i = 0; i < 20; i++) {
            if (handGroup.getSelection() == null) {
                Info.setText(bundle.getString("didNotChose"));
            } else {
                if (handGroup.getSelection().getActionCommand().equals(userHand.get(i).getActionCommand())) {
                    selected = i;
                    break;
                }
            }
        }

        if (selected != -1) {
            Tile toPlayed = seven.player1.getHandTile(selected);
            if (seven.canLeftMove(toPlayed) == true) {
                Info.setText(bundle.getString("leftMoveDone"));
                Table.setText(seven.showTableTiles());
                userHand.get(selected).setEnabled(false);
                handGroup.remove(userHand.get(selected));
                userHand.remove(selected);
                seven.player1.removeTile(selected);
            } else {
                Info.setText(bundle.getString("cantLeft"));
            }
        }
        if (false == seven.checkPlayer()) {
            if (seven.avaliableMove(hasStackButtonPressed) == true && seven.player1.numOfHandTiles() != 0) {
                Info.setText(bundle.getString("tip"));
            } else {
                if (seven.player1.numOfHandTiles() != 0 && seven.checkBot()) {
                    Info.setText(bundle.getString("noMoreMoves"));
                    do {
                        while(!seven.botMove() && seven.avaliableMove(botTookFromStack)){
                            Tile tempTile = seven.getStackTile(0);
                            seven.bot.addToHand(tempTile);
                            seven.removeTile(tempTile);
                        }
                    } while (seven.botMove());
                    botTookFromStack = true;
                    Table.setText(seven.showTableTiles());
                    if ((seven.checkPlayer() == false || seven.bot.numOfHandTiles() == 0) && seven.avaliableMove(hasStackButtonPressed) == false) {
                        checkIfGameOver();
                    }
                } else {
                    checkIfGameOver();
                }
            }
        }
    }
    /**
     * Initialize the Radio Buttons group.
     */
    private void initHandGroup() {
        handGroup = new javax.swing.ButtonGroup();
        for (int i = 0; i < 7; i++) {
            JRadioButton temp = new JRadioButton();
            userHand.add(temp);
            p1.add(userHand.get(i));
            userHand.get(i).setText(seven.player1.getHandTile(i).toString());
            handGroup.add(userHand.get(i));
            userHand.get(i).setActionCommand("RB" + i);
            userHand.get(i).setEnabled(true);
        }
        userHand.get(0).setSelected(true);
    }

    /**
     * Checks if game has over or just the round.
     */
    private void checkIfGameOver() {
        if (!seven.gameOver()) {
            Round.setText(bundle.getString("round") + ++round);
            Info.setText(bundle.getString("nextRound"));
            Score.setText(bundle.getString("scoreTemp") + seven.player1.getScore() + " " + bundle.getString("computer") + seven.bot.getScore());
            p1.removeAll();
            initHandGroup();
            Start.setEnabled(true);
            Stack.setEnabled(false);
        } else {
            Score.setText(seven.displayResults());
            Info.setText(bundle.getString("gameOver"));
            Stack.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, seven.displayResults());
        }
        PlaceLeft.setEnabled(false);
        PlaceRight.setEnabled(false);
    }
}
